[{"/home/devansh/react-apps/fyle-app/src/index.js":"1","/home/devansh/react-apps/fyle-app/src/App.js":"2","/home/devansh/react-apps/fyle-app/src/reportWebVitals.js":"3"},{"size":565,"mtime":1608543786381,"results":"4","hashOfConfig":"5"},{"size":10010,"mtime":1608571039142,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1608537201416,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"l81clc",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/home/devansh/react-apps/fyle-app/src/index.js",[],["16","17"],"/home/devansh/react-apps/fyle-app/src/App.js",["18","19"],"import React, { Component } from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport ls from 'local-storage'\n\nvar FontAwesome = require('react-fontawesome')\n\n    const locationItems = [\n      {\n          id: 0,\n          title: 'Bangalore',\n          selected: false,\n          key: 'location'\n      },\n      {\n        id: 1,\n        title: 'Delhi',\n        selected: false,\n        key: 'location'\n      },\n      {\n        id: 2,\n        title: 'Mumbai',\n        selected: false,\n        key: 'location'\n      },\n      {\n        id: 3,\n        title: 'Lucknow',\n        selected: false,\n        key: 'location'\n      },\n      {\n        id: 4,\n        title: 'Kolkata',\n        selected: false,\n        key: 'location'\n      }\n    ];\n\n    const pageSize = [\n          {id: 0,\n          title: '25',\n            value: 25\n        },\n        {id: 1,\n          title: '50',\n            value: 50\n        },\n        {id: 2,\n          title: '75',\n            value: 75\n        },\n        {id: 3,\n          title: '100',\n            value: 100\n        }\n    ];\n\n    const seeFavorites = [\n      {id: 0, title: \"Yes\", value: true},\n      {id: 1, title: \"No\", value: false}\n    ];\n\n    const todoItems = [\n      {\n\n      }\n    ];\n\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          todoList: todoItems,\n          location: locationItems,\n          headerTitle: 'Select location',\n          pagination: pageSize,\n          _pageSize: 10,\n          selectedLocation: '',\n          listOpen: false,\n          listOpen2: false,\n          listOpen3: false,\n          _seefav: false\n        };\n      }\n      addFavorite = (item) => {\n        var records = JSON.parse(ls.get('favorite'));\n        if(records == 0)\n        {\n          records = []\n        }\n        records.push(item);\n        ls.set('favorite', JSON.stringify(records));\n          console.log(ls.get('favorite'));\n      };\n      renderItems = () => {\n        const newItems = this.state.todoList\n        return (\n          <Table responsive striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>IFSC</th>\n                <th>Bank</th>\n                <th>Branch</th>\n                <th>Address</th>\n                <th>City</th>\n                <th>District</th>\n                <th>State</th>\n              </tr>\n            </thead>\n            <tbody>\n              {newItems.map((item) => (\n                 <tr onClick={(e) => this.addFavorite(item)}>\n                  <td>{item.ifsc}</td>\n                  <td>{item.bank}</td>\n                  <td>{item.branch}</td>\n                  <td>{item.address}</td>\n                  <td>{item.city}</td>\n                  <td>{item.district}</td>\n                  <td>{item.state}</td>\n                  </tr>\n              ))}\n            </tbody>\n          </Table>\n        );\n      };\n\n      renderFavs = () => {\n        const { viewCompleted } = this.state;\n        const newItems = JSON.parse(ls.get('favorite'))\n        return (\n          <Table responsive striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>IFSC</th>\n                <th>Bank</th>\n                <th>Branch</th>\n                <th>Address</th>\n                <th>City</th>\n                <th>District</th>\n                <th>State</th>\n              </tr>\n            </thead>\n            <tbody>\n              {newItems.map((item) => (\n                 <tr onClick={(e) => this.addFavorite(item)}>\n                  <td>{item.ifsc}</td>\n                  <td>{item.bank}</td>\n                  <td>{item.branch}</td>\n                  <td>{item.address}</td>\n                  <td>{item.city}</td>\n                  <td>{item.district}</td>\n                  <td>{item.state}</td>\n                  </tr>\n              ))}\n            </tbody>\n          </Table>\n        );\n      };\n\n      toggleList(){\n        this.setState(prevState => ({\n          listOpen: !prevState.listOpen\n        }))\n      }\n      \n      toggleList2(){\n        this.setState(prevState => ({\n          listOpen2: !prevState.listOpen2\n        }))\n      }\n\n      toggleList3(){\n        this.setState(prevState => ({\n          listOpen3: !prevState.listOpen3\n        }))\n      }\n      \n\n      componentDidMount () {\n        this.documentData = JSON.parse(localStorage.getItem('document'));\n        //const apiUrl = 'https://fyle-test-dev.herokuapp.com/api/branches/autocomplete?q=RTGS&offset=0&limit=10'\n        const apiUrl = `http://127.0.0.1:8080/api/branches/autocomplete?q=&offset=0&limit=${this.state._pageSize}`\n          fetch(apiUrl)\n        .then((response) => response.json())\n        .then((data) => this.setState({todoList: data,\n        }));\n      }\n\n      toggleItem = (id, key) => {\n        this.setState({selectedLocation: key}, () => {\n          const apiUrl = `http://127.0.0.1:8080/api/branches/autocomplete?q=${this.state.selectedLocation}&offset=0&limit=${this.state._pageSize}`\n        fetch(apiUrl)\n         .then((response) => response.json())\n          .then((data) => this.setState({todoList: data}));\n        });\n      };\n\n      togglePageSize = (value) => {\n        this.setState({_pageSize: value}, () => {\n          const apiUrl = `http://127.0.0.1:8080/api/branches/autocomplete?q=${this.state.selectedLocation}&offset=0&limit=${this.state._pageSize}`\n        fetch(apiUrl)\n         .then((response) => response.json())\n          .then((data) => this.setState({todoList: data}));\n        });\n      };\n\n      toggleSeeFav = (value) => {\n            this.setState({_seefav: value});\n      } \n      handleChange = (e) => {\n        console.log(e.target.value);\n        const apiUrl = `http://127.0.0.1:8080/api/branches?q=${e.target.value}&offset=0&limit=${this.state._pageSize}`\n        console.log(apiUrl);\n        fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => this.setState({todoList: data}));\n      }\n\n      renderDropdown =() => {\n        const{location} = this.state\n        const{listOpen, headerTitle} = this.state\n        return(\n          <div className=\"dd-wrapper\">\n           <div className=\"dd-header\" onClick={() => this.toggleList()}>\n              <div className=\"dd-header-title\">{headerTitle}</div>\n              {listOpen\n                ? <FontAwesome name=\"angle-up\" size=\"2x\"/>\n                : <FontAwesome name=\"angle-down\" size=\"2x\"/>\n              }\n            </div>\n            {listOpen && <ul className=\"dd-list\">\n             {location.map((item) => (\n              //  <li className=\"dd-list-item\" key={item.id} >{item.title} onClick={() => toggleItem(item.id, item.key)}>{item.title} {item.selected && <FontAwesome name=\"check\"/></li>\n               <li className=\"dd-list-item\" key={item.title} onClick={() => this.toggleItem(item.id, item.title)}>{item.title} {item.selected && <FontAwesome name=\"check\"/>}</li>\n              ))}\n            </ul>}\n          </div>\n        )\n      };\n\n      renderPageSize =() => {\n        const{pagination} = this.state\n        const{listOpen2} = this.state\n        return(\n          <div className=\"dd-wrapper\">\n           <div className=\"dd-header\" onClick={() => this.toggleList2()}>\n              <div className=\"dd-header-title\">Select Pagination</div>\n              {listOpen2\n                ? <FontAwesome name=\"angle-up\" size=\"10x\"/>\n                : <FontAwesome name=\"angle-down\" size=\"10x\"/>\n              }\n            </div>\n            {listOpen2 && <ul className=\"dd-list\">\n             {pagination.map((item) => (\n              //  <li className=\"dd-list-item\" key={item.id} >{item.title} onClick={() => toggleItem(item.id, item.key)}>{item.title} {item.selected && <FontAwesome name=\"check\"/></li>\n               <li className=\"dd-list-item\" key={item.title} onClick={() => this.togglePageSize(item.value)}>{item.title} {item.selected && <FontAwesome name=\"check\"/>}</li>\n              ))}\n            </ul>}\n          </div>\n        )\n      };\n\n\n\n      renderFavorites =() => {\n        console.log(\"opening drop\");\n        const{listOpen3} = this.state\n        return(\n          <div className=\"dd-wrapper\">\n           <div className=\"dd-header\" onClick={() => this.toggleList3()}>\n              <div className=\"dd-header-title\">See Favorites</div>\n              {listOpen3\n                ? <FontAwesome name=\"angle-up\" size=\"10x\"/>\n                : <FontAwesome name=\"angle-down\" size=\"10x\"/>\n              }\n            </div>\n            {listOpen3 && <ul className=\"dd-list\">\n             {seeFavorites.map((item) => (\n               <li className=\"dd-list-item\" key={item.title} onClick={() => this.toggleSeeFav(item.value)}>{item.title} {item.selected && <FontAwesome name=\"check\"/>}</li>\n              ))}\n            </ul>}\n          </div>\n        )\n      };\n      \n      \n      render() {\n        return (\n          <main className=\"content\">\n            <h1 className=\"text-white text-uppercase text-center my-4\">Find Bank Details</h1>\n            <div className=\"row \">\n              <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n                <div className=\"card p-3\">\n                  {/* <div className=\"\">\n                   onChange={(e) => {this.handleChange(e)}}\n                   value={this.state.selectedLocation}\n                    <button className=\"btn btn-primary\">Add task</button>\n                  </div> */}\n                  {this.renderDropdown()}\n                  {this.renderPageSize()}\n                  {this.renderFavorites()}\n                  {!this.state._seefav && <input placeholder=\"Search\" onChange={(e) => {this.handleChange(e)}} />}\n                  <ul className=\"list-group list-group-flush\">\n                    {!this.state._seefav && this.renderItems()}\n                    {this.state._seefav && this.renderFavs()}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </main>\n        );\n      }\n    }\n    export default App;","/home/devansh/react-apps/fyle-app/src/reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":88,"column":20,"nodeType":"26","messageId":"27","endLine":88,"endColumn":22},{"ruleId":"28","severity":1,"message":"29","line":129,"column":17,"nodeType":"30","messageId":"31","endLine":129,"endColumn":30},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'viewCompleted' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]